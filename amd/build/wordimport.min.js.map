{"version":3,"file":"wordimport.min.js","sources":["../src/wordimport.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Tiny tiny_wordimport for Moodle.\n *\n * @module      tiny_wordimport/import\n * @copyright   2023 Andr√© Menrath <andre.menrath@uni-graz.at>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import {add as addToast} from 'core/toast';\nimport {getContextId} from 'editor_tiny/options';\nimport uploadFile from 'editor_tiny/uploader';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport {getProcessedDocxContent} from './repository';\nimport {\n    displayUploadNotification,\n    updateNotificationProgress\n} from './ui';\n\n/**\n * Handler that inserts a dragged and dropped docx word file into the editor.\n *\n * It will upload the file as a draftfile and then use the converter of the\n * booktool_wordimport plugin to retrieve the html to insert.\n *\n * @param {TinyMCE.editor} editor\n * @param {DataTransfer} file\n */\nexport const droppedWordFileHandler = async(editor, file) => {\n    try {\n        const draftId = await uploadDraggedFile(editor, file);\n        const content = await getProcessedDocxContent(draftId, getContextId(editor), file.name);\n        insertRawHtml(editor, content);\n    } catch (error) {\n        // TODO: display errors properly\n        window.console.log(error);\n    }\n};\n\n/**\n * Handle the action for the Word Import\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\nexport const importWordFileHandler = async(editor) => {\n    try {\n        const file = await displayFilepicker(editor, 'docx');\n        const content = await getProcessedDocxContent(file.id, getContextId(editor), file.file);\n        insertRawHtml(editor, content);\n    } catch (error) {\n        // TODO: display errors properly\n        window.console.log(error);\n    }\n};\n\n/**\n * Insert raw html content into the editor at the current cursor position\n *\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {string} content The raw html content to be inserted in the editor\n */\nconst insertRawHtml = (editor, content) => {\n    // Get the current selection.\n    const selection = editor.selection;\n    // Get the current range.\n    const range = selection.getRng();\n    // Insert raw HTML content at the current cursor position.\n    range.insertNode(range.createContextualFragment(content.html));\n};\n\n/**\n * Upload a dragged and dropped file to moodle as a draftfile.\n *\n * @param {TinyMCE.editor} editor\n * @param {DataTransfer} file\n */\nconst uploadDraggedFile = async(editor, file) => {\n    const blob = await readAsArrayBuffer(file);\n    const notification = displayUploadNotification(editor);\n    const draftFileUrl = await uploadFile(\n        editor, 'docx', blob, file.name, (progress) => updateNotificationProgress(notification, progress)\n    );\n    notification.close();\n    return extractDraftId(draftFileUrl);\n};\n\nconst readAsArrayBuffer = (file) => {\n    return new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onload = () => resolve(new Blob([reader.result], { type: file.type }));\n    });\n};\n\nconst extractDraftId = (draftFileUrl) => {\n    return draftFileUrl.match(/\\/draft\\/(\\d+)\\//)[1];\n};\n"],"names":["async","editor","file","draftId","uploadDraggedFile","content","name","insertRawHtml","error","window","console","log","id","range","selection","getRng","insertNode","createContextualFragment","html","blob","readAsArrayBuffer","notification","draftFileUrl","progress","close","extractDraftId","Promise","resolve","reader","FileReader","onload","Blob","result","type","match"],"mappings":";;;;;;;+NA0CsCA,MAAMC,OAAQC,kBAEtCC,cAAgBC,kBAAkBH,OAAQC,MAC1CG,cAAgB,uCAAwBF,SAAS,yBAAaF,QAASC,KAAKI,MAClFC,cAAcN,OAAQI,SACxB,MAAOG,OAELC,OAAOC,QAAQC,IAAIH,wCASUR,MAAAA,mBAEvBE,WAAa,4BAAkBD,OAAQ,QACvCI,cAAgB,uCAAwBH,KAAKU,IAAI,yBAAaX,QAASC,KAAKA,MAClFK,cAAcN,OAAQI,SACxB,MAAOG,OAELC,OAAOC,QAAQC,IAAIH,eAUrBD,cAAgB,CAACN,OAAQI,iBAIrBQ,MAFYZ,OAAOa,UAEDC,SAExBF,MAAMG,WAAWH,MAAMI,yBAAyBZ,QAAQa,QAStDd,kBAAoBJ,MAAMC,OAAQC,cAC9BiB,WAAaC,kBAAkBlB,MAC/BmB,cAAe,iCAA0BpB,QACzCqB,mBAAqB,qBACvBrB,OAAQ,OAAQkB,KAAMjB,KAAKI,MAAOiB,WAAa,kCAA2BF,aAAcE,mBAE5FF,aAAaG,QACNC,eAAeH,eAGpBF,kBAAqBlB,MAChB,IAAIwB,SAASC,gBACVC,OAAS,IAAIC,WACnBD,OAAOR,kBAAkBlB,MACzB0B,OAAOE,OAAS,IAAMH,QAAQ,IAAII,KAAK,CAACH,OAAOI,QAAS,CAAEC,KAAM/B,KAAK+B,WAIvER,eAAkBH,cACbA,aAAaY,MAAM,oBAAoB"}