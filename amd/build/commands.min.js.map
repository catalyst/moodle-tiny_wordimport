{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_wordimport plugin.\n *\n * @module      plugintype_pluginname/commands\n * @copyright   2023 Andr√© Menrath <andre.menrath@uni-graz.at>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    wordimportButtonName,\n    wordimportMenuItemName,\n    icon\n} from './common';\nimport {getProcessedDocxContent} from './repository';\n\nimport {getFilePicker} from 'editor_tiny/options';\n\n/**\n * Helper to display a filepicker and return a Promise.\n *\n * The Promise will resolve when a file is selected, or reject if the file type is not found.\n *\n * @param {TinyMCE} editor\n * @param {string} filetype\n * @returns {Promise<object>} The file object returned by the filepicker\n */\nexport const displayFilepicker = (editor, filetype) => new Promise((resolve, reject) => {\n    var configuration = getFilePicker(editor, filetype);\n    // TODO: get rid of this hack.\n    configuration.accepted_types = [\".docx\"];\n    if (configuration) {\n        const options = {\n            ...configuration,\n            formcallback: resolve,\n        };\n        M.core_filepicker.show(Y, options);\n        return;\n    }\n    reject(`Unknown filetype ${filetype}`);\n});\n\n/**\n * Handle the action for the Word Import\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\nconst handleAction = async(editor) => {\n    // TODO: get rid of this hack.\n    displayFilepicker(editor, 'image').then(async(params) => {\n        window.console.log(params);\n        const content = await getProcessedDocxContent(params.id, params.file);\n        window.console.log(content);\n        editor.setContent(content.html, {format: 'raw'});\n        return;\n    }).catch();\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        wordimportButtonNameTitle,\n        wordimportMenuItemNameTitle,\n        buttonImage,\n    ] = await Promise.all([\n        getString('button_wordimport', component),\n        getString('menuitem_wordimport', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the wordimport Toolbar Button.\n        editor.ui.registry.addButton(wordimportButtonName, {\n            icon,\n            tooltip: wordimportButtonNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n        // Add the wordimport Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(wordimportMenuItemName, {\n            icon,\n            text: wordimportMenuItemNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n    };\n};\n"],"names":["displayFilepicker","editor","filetype","Promise","resolve","reject","configuration","accepted_types","options","formcallback","M","core_filepicker","show","Y","handleAction","async","then","window","console","log","params","content","id","file","setContent","html","format","catch","wordimportButtonNameTitle","wordimportMenuItemNameTitle","buttonImage","all","component","ui","registry","addIcon","icon","addButton","wordimportButtonName","tooltip","onAction","addMenuItem","wordimportMenuItemName","text"],"mappings":";;;;;;;;MA4CaA,kBAAoB,CAACC,OAAQC,WAAa,IAAIC,SAAQ,CAACC,QAASC,cACrEC,eAAgB,0BAAcL,OAAQC,aAE1CI,cAAcC,eAAiB,CAAC,SAC5BD,qBACME,QAAU,IACTF,cACHG,aAAcL,SAElBM,EAAEC,gBAAgBC,KAAKC,EAAGL,cAG9BH,kCAA2BH,iEAOzBY,aAAeC,MAAAA,SAEjBf,kBAAkBC,OAAQ,SAASe,MAAKD,MAAAA,SACpCE,OAAOC,QAAQC,IAAIC,cACbC,cAAgB,uCAAwBD,OAAOE,GAAIF,OAAOG,MAChEN,OAAOC,QAAQC,IAAIE,SACnBpB,OAAOuB,WAAWH,QAAQI,KAAM,CAACC,OAAQ,WAE1CC,2BAWiBZ,gBAEhBa,0BACAC,4BACAC,mBACM3B,QAAQ4B,IAAI,EAClB,mBAAU,oBAAqBC,oBAC/B,mBAAU,sBAAuBA,oBACjC,yBAAe,OAAQA,4BAGnB/B,SAEJA,OAAOgC,GAAGC,SAASC,QAAQC,aAAMN,YAAYL,MAG7CxB,OAAOgC,GAAGC,SAASG,UAAUC,6BAAsB,CAC/CF,KAAAA,aACAG,QAASX,0BACTY,SAAU,IAAM1B,aAAab,UAKjCA,OAAOgC,GAAGC,SAASO,YAAYC,+BAAwB,CACnDN,KAAAA,aACAO,KAAMd,4BACNW,SAAU,IAAM1B,aAAab"}