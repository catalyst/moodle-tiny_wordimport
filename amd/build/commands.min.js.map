{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_wordimport plugin.\n *\n * @module      plugintype_pluginname/commands\n * @copyright   2023 Andr√© Menrath <andre.menrath@uni-graz.at>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport {get_string as getString} from 'core/str';\nimport {getButtonImage} from 'editor_tiny/utils';\nimport uploadFile from 'editor_tiny/uploader';\nimport {add as addToast} from 'core/toast';\n\nimport {\n    getFilePicker,\n    getContextId\n} from 'editor_tiny/options';\n\nimport {\n    allowedFileType,\n    component,\n    wordimportButtonName,\n    wordimportMenuItemName,\n    icon\n} from './common';\n\nimport {getProcessedDocxContent} from './repository';\n\n\n/**\n * Helper to display a filepicker and return a Promise.\n *\n * The Promise will resolve when a file is selected, or reject if the file type is not found.\n *\n * @param {TinyMCE} editor\n * @param {string} filetype\n * @returns {Promise<object>} The file object returned by the filepicker\n */\nexport const displayFilepicker = (editor, filetype) => new Promise((resolve, reject) => {\n    var configuration = getFilePicker(editor, filetype);\n    if (configuration) {\n        const options = {\n            ...configuration,\n            formcallback: resolve,\n        };\n        M.core_filepicker.show(Y, options);\n        return;\n    }\n    reject(`Unknown filetype ${filetype}`);\n});\n\n\nconst insertRawHtml = (editor, content) => {\n    // Get the current selection.\n    const selection = editor.selection;\n    // Get the current range.\n    const range = selection.getRng();\n    // Insert raw HTML content at the current cursor position.\n    range.insertNode(range.createContextualFragment(content.html));\n};\n\n/**\n * Handle the action for the Word Import\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\nconst handleAction = async(editor) => {\n    // TODO: get rid of this hack.\n    displayFilepicker(editor, 'docx').then(async(params) => {\n        // Call the external webservice which wraps the converter functions from booktool_wordimport to get the content as HTML.\n        window.console.log(params);\n        const content = await getProcessedDocxContent(params.id, getContextId(editor), params.file);\n        insertRawHtml(editor, content);\n        return;\n    }).catch();\n};\n\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        wordimportButtonNameTitle,\n        wordimportMenuItemNameTitle,\n        buttonImage,\n    ] = await Promise.all([\n        getString('button_wordimport', component),\n        getString('menuitem_wordimport', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the wordimport Toolbar Button.\n        editor.ui.registry.addButton(wordimportButtonName, {\n            icon,\n            tooltip: wordimportButtonNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n        // Add the wordimport Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(wordimportMenuItemName, {\n            icon,\n            text: wordimportMenuItemNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n        editor.on('dragdrop drop', async(e) => {\n            if (e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files.length === 1) {\n                const file = e.dataTransfer.files[0];\n                if (file.type === allowedFileType) {\n                    e.preventDefault();\n                    try {\n                        const reader = new FileReader();\n                        reader.readAsArrayBuffer(file);\n                        reader.onload = async() => {\n                            const blob = new Blob([reader.result], {type: file.type});\n                            var notification = editor.notificationManager.open({\n                                text: editor.translate('Uploading document...'),\n                                type: 'info',\n                                timeout: -1,\n                                progressBar: true\n                            });\n                            window.console.log(notification);\n                            const draftFileURL = await uploadFile(editor, 'docx', blob, file.name, (progress) => {\n                                notification.progressBar.value(progress);\n                            });\n                            notification.close();\n                            // Because uploadFile returns only the url (see `response.newfile.url`) we need to extract the draftid.\n                            const draftid = draftFileURL.match(/\\/draft\\/(\\d+)\\//)[1];\n                            const content = await getProcessedDocxContent(draftid, getContextId(editor), file.name);\n                            insertRawHtml(editor, content);\n                        };\n                    } catch (error) {\n                        addToast(await getString('uploadfailed', component, {error}), {\n                            type: 'error',\n                        });\n                    }\n                }\n            }\n        });\n\n    };\n};\n"],"names":["displayFilepicker","editor","filetype","Promise","resolve","reject","configuration","options","formcallback","M","core_filepicker","show","Y","insertRawHtml","content","range","selection","getRng","insertNode","createContextualFragment","html","handleAction","async","then","window","console","log","params","id","file","catch","wordimportButtonNameTitle","wordimportMenuItemNameTitle","buttonImage","all","component","ui","registry","addIcon","icon","addButton","wordimportButtonName","tooltip","onAction","addMenuItem","wordimportMenuItemName","text","on","e","dataTransfer","files","length","type","allowedFileType","preventDefault","reader","FileReader","readAsArrayBuffer","onload","blob","Blob","result","notification","notificationManager","open","translate","timeout","progressBar","draftFileURL","name","progress","value","close","draftid","match","error"],"mappings":";;;;;;;mLAsDaA,kBAAoB,CAACC,OAAQC,WAAa,IAAIC,SAAQ,CAACC,QAASC,cACrEC,eAAgB,0BAAcL,OAAQC,aACtCI,qBACMC,QAAU,IACTD,cACHE,aAAcJ,SAElBK,EAAEC,gBAAgBC,KAAKC,EAAGL,cAG9BF,kCAA2BH,iEAIzBW,cAAgB,CAACZ,OAAQa,iBAIrBC,MAFYd,OAAOe,UAEDC,SAExBF,MAAMG,WAAWH,MAAMI,yBAAyBL,QAAQM,QAOtDC,aAAeC,MAAAA,SAEjBtB,kBAAkBC,OAAQ,QAAQsB,MAAKD,MAAAA,SAEnCE,OAAOC,QAAQC,IAAIC,cACbb,cAAgB,uCAAwBa,OAAOC,IAAI,yBAAa3B,QAAS0B,OAAOE,MACtFhB,cAAcZ,OAAQa,YAEvBgB,2BAYiBR,gBAEhBS,0BACAC,4BACAC,mBACM9B,QAAQ+B,IAAI,EAClB,mBAAU,oBAAqBC,oBAC/B,mBAAU,sBAAuBA,oBACjC,yBAAe,OAAQA,4BAGnBlC,SAEJA,OAAOmC,GAAGC,SAASC,QAAQC,aAAMN,YAAYb,MAG7CnB,OAAOmC,GAAGC,SAASG,UAAUC,6BAAsB,CAC/CF,KAAAA,aACAG,QAASX,0BACTY,SAAU,IAAMtB,aAAapB,UAKjCA,OAAOmC,GAAGC,SAASO,YAAYC,+BAAwB,CACnDN,KAAAA,aACAO,KAAMd,4BACNW,SAAU,IAAMtB,aAAapB,UAGjCA,OAAO8C,GAAG,iBAAiBzB,MAAAA,OACnB0B,EAAEC,cAAgBD,EAAEC,aAAaC,OAAyC,IAAhCF,EAAEC,aAAaC,MAAMC,OAAc,OACvEtB,KAAOmB,EAAEC,aAAaC,MAAM,MAC9BrB,KAAKuB,OAASC,wBAAiB,CAC/BL,EAAEM,2BAEQC,OAAS,IAAIC,WACnBD,OAAOE,kBAAkB5B,MACzB0B,OAAOG,OAASpC,gBACNqC,KAAO,IAAIC,KAAK,CAACL,OAAOM,QAAS,CAACT,KAAMvB,KAAKuB,WAC/CU,aAAe7D,OAAO8D,oBAAoBC,KAAK,CAC/ClB,KAAM7C,OAAOgE,UAAU,yBACvBb,KAAM,OACNc,SAAU,EACVC,aAAa,IAEjB3C,OAAOC,QAAQC,IAAIoC,oBACbM,mBAAqB,qBAAWnE,OAAQ,OAAQ0D,KAAM9B,KAAKwC,MAAOC,WACpER,aAAaK,YAAYI,MAAMD,aAEnCR,aAAaU,cAEPC,QAAUL,aAAaM,MAAM,oBAAoB,GACjD5D,cAAgB,uCAAwB2D,SAAS,yBAAaxE,QAAS4B,KAAKwC,MAClFxD,cAAcZ,OAAQa,UAE5B,MAAO6D,4BACU,mBAAU,eAAgBxC,kBAAW,CAACwC,MAAAA,QAAS,CAC1DvB,KAAM"}