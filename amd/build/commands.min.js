define("tiny_wordimport/commands",["exports","core/str","editor_tiny/utils","editor_tiny/uploader","core/toast","editor_tiny/options","./common","./repository"],(function(_exports,_str,_utils,_uploader,_toast,_options,_common,_repository){var obj;
/**
   * Commands helper for the Moodle tiny_wordimport plugin.
   *
   * @module      plugintype_pluginname/commands
   * @copyright   2023 Andr√© Menrath <andre.menrath@uni-graz.at>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getSetup=_exports.displayFilepicker=void 0,_uploader=(obj=_uploader)&&obj.__esModule?obj:{default:obj};const displayFilepicker=(editor,filetype)=>new Promise(((resolve,reject)=>{var configuration=(0,_options.getFilePicker)(editor,filetype);if(configuration){const options={...configuration,formcallback:resolve};M.core_filepicker.show(Y,options)}else reject("Unknown filetype ".concat(filetype))}));_exports.displayFilepicker=displayFilepicker;const insertRawHtml=(editor,content)=>{const range=editor.selection.getRng();range.insertNode(range.createContextualFragment(content.html))},handleAction=async editor=>{displayFilepicker(editor,"docx").then((async params=>{window.console.log(params);const content=await(0,_repository.getProcessedDocxContent)(params.id,(0,_options.getContextId)(editor),params.file);insertRawHtml(editor,content)})).catch()};_exports.getSetup=async()=>{const[wordimportButtonNameTitle,wordimportMenuItemNameTitle,buttonImage]=await Promise.all([(0,_str.get_string)("button_wordimport",_common.component),(0,_str.get_string)("menuitem_wordimport",_common.component),(0,_utils.getButtonImage)("icon",_common.component)]);return editor=>{editor.ui.registry.addIcon(_common.icon,buttonImage.html),editor.ui.registry.addButton(_common.wordimportButtonName,{icon:_common.icon,tooltip:wordimportButtonNameTitle,onAction:()=>handleAction(editor)}),editor.ui.registry.addMenuItem(_common.wordimportMenuItemName,{icon:_common.icon,text:wordimportMenuItemNameTitle,onAction:()=>handleAction(editor)}),editor.on("dragdrop drop",(async e=>{if(e.dataTransfer&&e.dataTransfer.files&&1===e.dataTransfer.files.length){const file=e.dataTransfer.files[0];if(file.type===_common.allowedFileType){e.preventDefault();try{const reader=new FileReader;reader.readAsArrayBuffer(file),reader.onload=async()=>{const blob=new Blob([reader.result],{type:file.type});var notification=editor.notificationManager.open({text:editor.translate("Uploading document..."),type:"info",timeout:-1,progressBar:!0});window.console.log(notification);const draftFileURL=await(0,_uploader.default)(editor,"docx",blob,file.name,(progress=>{notification.progressBar.value(progress)}));notification.close();const draftid=draftFileURL.match(/\/draft\/(\d+)\//)[1],content=await(0,_repository.getProcessedDocxContent)(draftid,(0,_options.getContextId)(editor),file.name);insertRawHtml(editor,content)}}catch(error){(0,_toast.add)(await(0,_str.get_string)("uploadfailed",_common.component,{error:error}),{type:"error"})}}}}))}}}));

//# sourceMappingURL=commands.min.js.map