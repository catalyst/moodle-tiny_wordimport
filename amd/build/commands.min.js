define("tiny_wordimport/commands",["exports","editor_tiny/utils","core/str","./common","editor_tiny/options"],(function(_exports,_utils,_str,_common,_options){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getSetup=_exports.displayFilepicker=void 0;
/**
   * Commands helper for the Moodle tiny_wordimport plugin.
   *
   * @module      plugintype_pluginname/commands
   * @copyright   2023 Andr√© Menrath <andre.menrath@uni-graz.at>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
const displayFilepicker=(editor,filetype)=>new Promise(((resolve,reject)=>{var configuration=(0,_options.getFilePicker)(editor,filetype);if(configuration.accepted_types.push(".docx"),configuration){const options={...configuration,formcallback:resolve};M.core_filepicker.show(Y,options)}else reject("Unknown filetype ".concat(filetype))}));_exports.displayFilepicker=displayFilepicker;const handleAction=async editor=>{displayFilepicker(editor,"image").then((params=>{window.console.log(params)})).catch()};_exports.getSetup=async()=>{const[wordimportButtonNameTitle,wordimportMenuItemNameTitle,buttonImage]=await Promise.all([(0,_str.get_string)("button_wordimport",_common.component),(0,_str.get_string)("menuitem_wordimport",_common.component),(0,_utils.getButtonImage)("icon",_common.component)]);return editor=>{editor.ui.registry.addIcon(_common.icon,buttonImage.html),editor.ui.registry.addButton(_common.wordimportButtonName,{icon:_common.icon,tooltip:wordimportButtonNameTitle,onAction:()=>handleAction(editor)}),editor.ui.registry.addMenuItem(_common.wordimportMenuItemName,{icon:_common.icon,text:wordimportMenuItemNameTitle,onAction:()=>handleAction(editor)})}}}));

//# sourceMappingURL=commands.min.js.map